// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: proto/fsdriver.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WatchEventType int32

const (
	WatchEventType_UNKNOWN WatchEventType = 0
	WatchEventType_CREATE  WatchEventType = 1
	WatchEventType_DELETE  WatchEventType = 2
	WatchEventType_MODIFY  WatchEventType = 3
	WatchEventType_RENAME  WatchEventType = 4
	WatchEventType_ATTRIB  WatchEventType = 5 // Attribute change
)

// Enum value maps for WatchEventType.
var (
	WatchEventType_name = map[int32]string{
		0: "UNKNOWN",
		1: "CREATE",
		2: "DELETE",
		3: "MODIFY",
		4: "RENAME",
		5: "ATTRIB",
	}
	WatchEventType_value = map[string]int32{
		"UNKNOWN": 0,
		"CREATE":  1,
		"DELETE":  2,
		"MODIFY":  3,
		"RENAME":  4,
		"ATTRIB":  5,
	}
)

func (x WatchEventType) Enum() *WatchEventType {
	p := new(WatchEventType)
	*p = x
	return p
}

func (x WatchEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WatchEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_fsdriver_proto_enumTypes[0].Descriptor()
}

func (WatchEventType) Type() protoreflect.EnumType {
	return &file_proto_fsdriver_proto_enumTypes[0]
}

func (x WatchEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WatchEventType.Descriptor instead.
func (WatchEventType) EnumDescriptor() ([]byte, []int) {
	return file_proto_fsdriver_proto_rawDescGZIP(), []int{0}
}

// File attributes (POSIX-like)
type FileInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IsDir         bool                   `protobuf:"varint,2,opt,name=is_dir,json=isDir,proto3" json:"is_dir,omitempty"`
	Size          int64                  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	ModTime       int64                  `protobuf:"varint,4,opt,name=mod_time,json=modTime,proto3" json:"mod_time,omitempty"` // Unix timestamp
	AccessTime    int64                  `protobuf:"varint,5,opt,name=access_time,json=accessTime,proto3" json:"access_time,omitempty"`
	ChangeTime    int64                  `protobuf:"varint,6,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
	Mode          uint32                 `protobuf:"varint,7,opt,name=mode,proto3" json:"mode,omitempty"` // POSIX permissions
	Uid           uint32                 `protobuf:"varint,8,opt,name=uid,proto3" json:"uid,omitempty"`
	Gid           uint32                 `protobuf:"varint,9,opt,name=gid,proto3" json:"gid,omitempty"`
	IsSymlink     bool                   `protobuf:"varint,10,opt,name=is_symlink,json=isSymlink,proto3" json:"is_symlink,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	mi := &file_proto_fsdriver_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fsdriver_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_proto_fsdriver_proto_rawDescGZIP(), []int{0}
}

func (x *FileInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileInfo) GetIsDir() bool {
	if x != nil {
		return x.IsDir
	}
	return false
}

func (x *FileInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileInfo) GetModTime() int64 {
	if x != nil {
		return x.ModTime
	}
	return 0
}

func (x *FileInfo) GetAccessTime() int64 {
	if x != nil {
		return x.AccessTime
	}
	return 0
}

func (x *FileInfo) GetChangeTime() int64 {
	if x != nil {
		return x.ChangeTime
	}
	return 0
}

func (x *FileInfo) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *FileInfo) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *FileInfo) GetGid() uint32 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *FileInfo) GetIsSymlink() bool {
	if x != nil {
		return x.IsSymlink
	}
	return false
}

// Error details
type Error struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                            // POSIX errno
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                       // Human readable
	Win32Code     int32                  `protobuf:"varint,3,opt,name=win32_code,json=win32Code,proto3" json:"win32_code,omitempty"` // Original Windows error code
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_proto_fsdriver_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fsdriver_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_proto_fsdriver_proto_rawDescGZIP(), []int{1}
}

func (x *Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetWin32Code() int32 {
	if x != nil {
		return x.Win32Code
	}
	return 0
}

// Stat request/response
type StatRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"` // Relative to share root
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatRequest) Reset() {
	*x = StatRequest{}
	mi := &file_proto_fsdriver_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatRequest) ProtoMessage() {}

func (x *StatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fsdriver_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatRequest.ProtoReflect.Descriptor instead.
func (*StatRequest) Descriptor() ([]byte, []int) {
	return file_proto_fsdriver_proto_rawDescGZIP(), []int{2}
}

func (x *StatRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type StatResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Result:
	//
	//	*StatResponse_Info
	//	*StatResponse_Error
	Result        isStatResponse_Result `protobuf_oneof:"result"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatResponse) Reset() {
	*x = StatResponse{}
	mi := &file_proto_fsdriver_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatResponse) ProtoMessage() {}

func (x *StatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fsdriver_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatResponse.ProtoReflect.Descriptor instead.
func (*StatResponse) Descriptor() ([]byte, []int) {
	return file_proto_fsdriver_proto_rawDescGZIP(), []int{3}
}

func (x *StatResponse) GetResult() isStatResponse_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *StatResponse) GetInfo() *FileInfo {
	if x != nil {
		if x, ok := x.Result.(*StatResponse_Info); ok {
			return x.Info
		}
	}
	return nil
}

func (x *StatResponse) GetError() *Error {
	if x != nil {
		if x, ok := x.Result.(*StatResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isStatResponse_Result interface {
	isStatResponse_Result()
}

type StatResponse_Info struct {
	Info *FileInfo `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type StatResponse_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*StatResponse_Info) isStatResponse_Result() {}

func (*StatResponse_Error) isStatResponse_Result() {}

// ReadDir request/response
type ReadDirRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`      // Relative to share root
	Offset        int32                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"` // For pagination
	Limit         int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`   // Max entries to return (0 = all)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadDirRequest) Reset() {
	*x = ReadDirRequest{}
	mi := &file_proto_fsdriver_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadDirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDirRequest) ProtoMessage() {}

func (x *ReadDirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fsdriver_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDirRequest.ProtoReflect.Descriptor instead.
func (*ReadDirRequest) Descriptor() ([]byte, []int) {
	return file_proto_fsdriver_proto_rawDescGZIP(), []int{4}
}

func (x *ReadDirRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ReadDirRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ReadDirRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ReadDirResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entries       []*FileInfo            `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	HasMore       bool                   `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	Error         *Error                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadDirResponse) Reset() {
	*x = ReadDirResponse{}
	mi := &file_proto_fsdriver_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadDirResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDirResponse) ProtoMessage() {}

func (x *ReadDirResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fsdriver_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDirResponse.ProtoReflect.Descriptor instead.
func (*ReadDirResponse) Descriptor() ([]byte, []int) {
	return file_proto_fsdriver_proto_rawDescGZIP(), []int{5}
}

func (x *ReadDirResponse) GetEntries() []*FileInfo {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *ReadDirResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *ReadDirResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Open request/response
type OpenRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`    // Relative to share root
	Flags         int32                  `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"` // O_RDONLY, O_RDWR, etc.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OpenRequest) Reset() {
	*x = OpenRequest{}
	mi := &file_proto_fsdriver_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenRequest) ProtoMessage() {}

func (x *OpenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fsdriver_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenRequest.ProtoReflect.Descriptor instead.
func (*OpenRequest) Descriptor() ([]byte, []int) {
	return file_proto_fsdriver_proto_rawDescGZIP(), []int{6}
}

func (x *OpenRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *OpenRequest) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type OpenResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Result:
	//
	//	*OpenResponse_Handle
	//	*OpenResponse_Error
	Result        isOpenResponse_Result `protobuf_oneof:"result"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OpenResponse) Reset() {
	*x = OpenResponse{}
	mi := &file_proto_fsdriver_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenResponse) ProtoMessage() {}

func (x *OpenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fsdriver_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenResponse.ProtoReflect.Descriptor instead.
func (*OpenResponse) Descriptor() ([]byte, []int) {
	return file_proto_fsdriver_proto_rawDescGZIP(), []int{7}
}

func (x *OpenResponse) GetResult() isOpenResponse_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *OpenResponse) GetHandle() int32 {
	if x != nil {
		if x, ok := x.Result.(*OpenResponse_Handle); ok {
			return x.Handle
		}
	}
	return 0
}

func (x *OpenResponse) GetError() *Error {
	if x != nil {
		if x, ok := x.Result.(*OpenResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isOpenResponse_Result interface {
	isOpenResponse_Result()
}

type OpenResponse_Handle struct {
	Handle int32 `protobuf:"varint,1,opt,name=handle,proto3,oneof"` // File handle for subsequent operations
}

type OpenResponse_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*OpenResponse_Handle) isOpenResponse_Result() {}

func (*OpenResponse_Error) isOpenResponse_Result() {}

// Read request/response
type ReadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Handle        int32                  `protobuf:"varint,1,opt,name=handle,proto3" json:"handle,omitempty"` // From OpenResponse
	Offset        int64                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"` // Read offset
	Size          int32                  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`     // Bytes to read
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadRequest) Reset() {
	*x = ReadRequest{}
	mi := &file_proto_fsdriver_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRequest) ProtoMessage() {}

func (x *ReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fsdriver_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRequest.ProtoReflect.Descriptor instead.
func (*ReadRequest) Descriptor() ([]byte, []int) {
	return file_proto_fsdriver_proto_rawDescGZIP(), []int{8}
}

func (x *ReadRequest) GetHandle() int32 {
	if x != nil {
		return x.Handle
	}
	return 0
}

func (x *ReadRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ReadRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ReadResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Result:
	//
	//	*ReadResponse_Data
	//	*ReadResponse_Error
	Result        isReadResponse_Result `protobuf_oneof:"result"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadResponse) Reset() {
	*x = ReadResponse{}
	mi := &file_proto_fsdriver_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResponse) ProtoMessage() {}

func (x *ReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fsdriver_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResponse.ProtoReflect.Descriptor instead.
func (*ReadResponse) Descriptor() ([]byte, []int) {
	return file_proto_fsdriver_proto_rawDescGZIP(), []int{9}
}

func (x *ReadResponse) GetResult() isReadResponse_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReadResponse) GetData() []byte {
	if x != nil {
		if x, ok := x.Result.(*ReadResponse_Data); ok {
			return x.Data
		}
	}
	return nil
}

func (x *ReadResponse) GetError() *Error {
	if x != nil {
		if x, ok := x.Result.(*ReadResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isReadResponse_Result interface {
	isReadResponse_Result()
}

type ReadResponse_Data struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3,oneof"` // File data
}

type ReadResponse_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*ReadResponse_Data) isReadResponse_Result() {}

func (*ReadResponse_Error) isReadResponse_Result() {}

// Close request/response
type CloseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Handle        int32                  `protobuf:"varint,1,opt,name=handle,proto3" json:"handle,omitempty"` // From OpenResponse
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloseRequest) Reset() {
	*x = CloseRequest{}
	mi := &file_proto_fsdriver_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseRequest) ProtoMessage() {}

func (x *CloseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fsdriver_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseRequest.ProtoReflect.Descriptor instead.
func (*CloseRequest) Descriptor() ([]byte, []int) {
	return file_proto_fsdriver_proto_rawDescGZIP(), []int{10}
}

func (x *CloseRequest) GetHandle() int32 {
	if x != nil {
		return x.Handle
	}
	return 0
}

type CloseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         *Error                 `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloseResponse) Reset() {
	*x = CloseResponse{}
	mi := &file_proto_fsdriver_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseResponse) ProtoMessage() {}

func (x *CloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fsdriver_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseResponse.ProtoReflect.Descriptor instead.
func (*CloseResponse) Descriptor() ([]byte, []int) {
	return file_proto_fsdriver_proto_rawDescGZIP(), []int{11}
}

func (x *CloseResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Watch request (client to server)
type WatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`            // Directory to watch (relative to share root)
	Recursive     bool                   `protobuf:"varint,2,opt,name=recursive,proto3" json:"recursive,omitempty"` // Watch subdirectories
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchRequest) Reset() {
	*x = WatchRequest{}
	mi := &file_proto_fsdriver_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchRequest) ProtoMessage() {}

func (x *WatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fsdriver_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchRequest.ProtoReflect.Descriptor instead.
func (*WatchRequest) Descriptor() ([]byte, []int) {
	return file_proto_fsdriver_proto_rawDescGZIP(), []int{12}
}

func (x *WatchRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *WatchRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

// Watch event (server to client)
type WatchEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"` // Relative to share root
	Type          WatchEventType         `protobuf:"varint,2,opt,name=type,proto3,enum=fsdriver.WatchEventType" json:"type,omitempty"`
	OldPath       string                 `protobuf:"bytes,3,opt,name=old_path,json=oldPath,proto3" json:"old_path,omitempty"` // For rename events
	Timestamp     int64                  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`           // Unix timestamp
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchEvent) Reset() {
	*x = WatchEvent{}
	mi := &file_proto_fsdriver_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchEvent) ProtoMessage() {}

func (x *WatchEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fsdriver_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchEvent.ProtoReflect.Descriptor instead.
func (*WatchEvent) Descriptor() ([]byte, []int) {
	return file_proto_fsdriver_proto_rawDescGZIP(), []int{13}
}

func (x *WatchEvent) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *WatchEvent) GetType() WatchEventType {
	if x != nil {
		return x.Type
	}
	return WatchEventType_UNKNOWN
}

func (x *WatchEvent) GetOldPath() string {
	if x != nil {
		return x.OldPath
	}
	return ""
}

func (x *WatchEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

var File_proto_fsdriver_proto protoreflect.FileDescriptor

const file_proto_fsdriver_proto_rawDesc = "" +
	"\n" +
	"\x14proto/fsdriver.proto\x12\bfsdriver\"\xfd\x01\n" +
	"\bFileInfo\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x15\n" +
	"\x06is_dir\x18\x02 \x01(\bR\x05isDir\x12\x12\n" +
	"\x04size\x18\x03 \x01(\x03R\x04size\x12\x19\n" +
	"\bmod_time\x18\x04 \x01(\x03R\amodTime\x12\x1f\n" +
	"\vaccess_time\x18\x05 \x01(\x03R\n" +
	"accessTime\x12\x1f\n" +
	"\vchange_time\x18\x06 \x01(\x03R\n" +
	"changeTime\x12\x12\n" +
	"\x04mode\x18\a \x01(\rR\x04mode\x12\x10\n" +
	"\x03uid\x18\b \x01(\rR\x03uid\x12\x10\n" +
	"\x03gid\x18\t \x01(\rR\x03gid\x12\x1d\n" +
	"\n" +
	"is_symlink\x18\n" +
	" \x01(\bR\tisSymlink\"T\n" +
	"\x05Error\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"win32_code\x18\x03 \x01(\x05R\twin32Code\"!\n" +
	"\vStatRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\"k\n" +
	"\fStatResponse\x12(\n" +
	"\x04info\x18\x01 \x01(\v2\x12.fsdriver.FileInfoH\x00R\x04info\x12'\n" +
	"\x05error\x18\x02 \x01(\v2\x0f.fsdriver.ErrorH\x00R\x05errorB\b\n" +
	"\x06result\"R\n" +
	"\x0eReadDirRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x05R\x06offset\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x05R\x05limit\"\x81\x01\n" +
	"\x0fReadDirResponse\x12,\n" +
	"\aentries\x18\x01 \x03(\v2\x12.fsdriver.FileInfoR\aentries\x12\x19\n" +
	"\bhas_more\x18\x02 \x01(\bR\ahasMore\x12%\n" +
	"\x05error\x18\x03 \x01(\v2\x0f.fsdriver.ErrorR\x05error\"7\n" +
	"\vOpenRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x14\n" +
	"\x05flags\x18\x02 \x01(\x05R\x05flags\"[\n" +
	"\fOpenResponse\x12\x18\n" +
	"\x06handle\x18\x01 \x01(\x05H\x00R\x06handle\x12'\n" +
	"\x05error\x18\x02 \x01(\v2\x0f.fsdriver.ErrorH\x00R\x05errorB\b\n" +
	"\x06result\"Q\n" +
	"\vReadRequest\x12\x16\n" +
	"\x06handle\x18\x01 \x01(\x05R\x06handle\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x03R\x06offset\x12\x12\n" +
	"\x04size\x18\x03 \x01(\x05R\x04size\"W\n" +
	"\fReadResponse\x12\x14\n" +
	"\x04data\x18\x01 \x01(\fH\x00R\x04data\x12'\n" +
	"\x05error\x18\x02 \x01(\v2\x0f.fsdriver.ErrorH\x00R\x05errorB\b\n" +
	"\x06result\"&\n" +
	"\fCloseRequest\x12\x16\n" +
	"\x06handle\x18\x01 \x01(\x05R\x06handle\"6\n" +
	"\rCloseResponse\x12%\n" +
	"\x05error\x18\x01 \x01(\v2\x0f.fsdriver.ErrorR\x05error\"@\n" +
	"\fWatchRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x1c\n" +
	"\trecursive\x18\x02 \x01(\bR\trecursive\"\x87\x01\n" +
	"\n" +
	"WatchEvent\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12,\n" +
	"\x04type\x18\x02 \x01(\x0e2\x18.fsdriver.WatchEventTypeR\x04type\x12\x19\n" +
	"\bold_path\x18\x03 \x01(\tR\aoldPath\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x03R\ttimestamp*Y\n" +
	"\x0eWatchEventType\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\n" +
	"\n" +
	"\x06CREATE\x10\x01\x12\n" +
	"\n" +
	"\x06DELETE\x10\x02\x12\n" +
	"\n" +
	"\x06MODIFY\x10\x03\x12\n" +
	"\n" +
	"\x06RENAME\x10\x04\x12\n" +
	"\n" +
	"\x06ATTRIB\x10\x052\xed\x02\n" +
	"\x11FileSystemService\x125\n" +
	"\x04Stat\x12\x15.fsdriver.StatRequest\x1a\x16.fsdriver.StatResponse\x12>\n" +
	"\aReadDir\x12\x18.fsdriver.ReadDirRequest\x1a\x19.fsdriver.ReadDirResponse\x125\n" +
	"\x04Open\x12\x15.fsdriver.OpenRequest\x1a\x16.fsdriver.OpenResponse\x125\n" +
	"\x04Read\x12\x15.fsdriver.ReadRequest\x1a\x16.fsdriver.ReadResponse\x128\n" +
	"\x05Close\x12\x16.fsdriver.CloseRequest\x1a\x17.fsdriver.CloseResponse\x129\n" +
	"\x05Watch\x12\x16.fsdriver.WatchRequest\x1a\x14.fsdriver.WatchEvent(\x010\x01B#Z!github.com/example/fsdriver/protob\x06proto3"

var (
	file_proto_fsdriver_proto_rawDescOnce sync.Once
	file_proto_fsdriver_proto_rawDescData []byte
)

func file_proto_fsdriver_proto_rawDescGZIP() []byte {
	file_proto_fsdriver_proto_rawDescOnce.Do(func() {
		file_proto_fsdriver_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_fsdriver_proto_rawDesc), len(file_proto_fsdriver_proto_rawDesc)))
	})
	return file_proto_fsdriver_proto_rawDescData
}

var file_proto_fsdriver_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_fsdriver_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_proto_fsdriver_proto_goTypes = []any{
	(WatchEventType)(0),     // 0: fsdriver.WatchEventType
	(*FileInfo)(nil),        // 1: fsdriver.FileInfo
	(*Error)(nil),           // 2: fsdriver.Error
	(*StatRequest)(nil),     // 3: fsdriver.StatRequest
	(*StatResponse)(nil),    // 4: fsdriver.StatResponse
	(*ReadDirRequest)(nil),  // 5: fsdriver.ReadDirRequest
	(*ReadDirResponse)(nil), // 6: fsdriver.ReadDirResponse
	(*OpenRequest)(nil),     // 7: fsdriver.OpenRequest
	(*OpenResponse)(nil),    // 8: fsdriver.OpenResponse
	(*ReadRequest)(nil),     // 9: fsdriver.ReadRequest
	(*ReadResponse)(nil),    // 10: fsdriver.ReadResponse
	(*CloseRequest)(nil),    // 11: fsdriver.CloseRequest
	(*CloseResponse)(nil),   // 12: fsdriver.CloseResponse
	(*WatchRequest)(nil),    // 13: fsdriver.WatchRequest
	(*WatchEvent)(nil),      // 14: fsdriver.WatchEvent
}
var file_proto_fsdriver_proto_depIdxs = []int32{
	1,  // 0: fsdriver.StatResponse.info:type_name -> fsdriver.FileInfo
	2,  // 1: fsdriver.StatResponse.error:type_name -> fsdriver.Error
	1,  // 2: fsdriver.ReadDirResponse.entries:type_name -> fsdriver.FileInfo
	2,  // 3: fsdriver.ReadDirResponse.error:type_name -> fsdriver.Error
	2,  // 4: fsdriver.OpenResponse.error:type_name -> fsdriver.Error
	2,  // 5: fsdriver.ReadResponse.error:type_name -> fsdriver.Error
	2,  // 6: fsdriver.CloseResponse.error:type_name -> fsdriver.Error
	0,  // 7: fsdriver.WatchEvent.type:type_name -> fsdriver.WatchEventType
	3,  // 8: fsdriver.FileSystemService.Stat:input_type -> fsdriver.StatRequest
	5,  // 9: fsdriver.FileSystemService.ReadDir:input_type -> fsdriver.ReadDirRequest
	7,  // 10: fsdriver.FileSystemService.Open:input_type -> fsdriver.OpenRequest
	9,  // 11: fsdriver.FileSystemService.Read:input_type -> fsdriver.ReadRequest
	11, // 12: fsdriver.FileSystemService.Close:input_type -> fsdriver.CloseRequest
	13, // 13: fsdriver.FileSystemService.Watch:input_type -> fsdriver.WatchRequest
	4,  // 14: fsdriver.FileSystemService.Stat:output_type -> fsdriver.StatResponse
	6,  // 15: fsdriver.FileSystemService.ReadDir:output_type -> fsdriver.ReadDirResponse
	8,  // 16: fsdriver.FileSystemService.Open:output_type -> fsdriver.OpenResponse
	10, // 17: fsdriver.FileSystemService.Read:output_type -> fsdriver.ReadResponse
	12, // 18: fsdriver.FileSystemService.Close:output_type -> fsdriver.CloseResponse
	14, // 19: fsdriver.FileSystemService.Watch:output_type -> fsdriver.WatchEvent
	14, // [14:20] is the sub-list for method output_type
	8,  // [8:14] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_proto_fsdriver_proto_init() }
func file_proto_fsdriver_proto_init() {
	if File_proto_fsdriver_proto != nil {
		return
	}
	file_proto_fsdriver_proto_msgTypes[3].OneofWrappers = []any{
		(*StatResponse_Info)(nil),
		(*StatResponse_Error)(nil),
	}
	file_proto_fsdriver_proto_msgTypes[7].OneofWrappers = []any{
		(*OpenResponse_Handle)(nil),
		(*OpenResponse_Error)(nil),
	}
	file_proto_fsdriver_proto_msgTypes[9].OneofWrappers = []any{
		(*ReadResponse_Data)(nil),
		(*ReadResponse_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_fsdriver_proto_rawDesc), len(file_proto_fsdriver_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_fsdriver_proto_goTypes,
		DependencyIndexes: file_proto_fsdriver_proto_depIdxs,
		EnumInfos:         file_proto_fsdriver_proto_enumTypes,
		MessageInfos:      file_proto_fsdriver_proto_msgTypes,
	}.Build()
	File_proto_fsdriver_proto = out.File
	file_proto_fsdriver_proto_goTypes = nil
	file_proto_fsdriver_proto_depIdxs = nil
}
